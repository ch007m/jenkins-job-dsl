apply plugin: 'groovy'

version = '1.0.0-SNAPSHOT'

ext {
    jenkinsCore=2.271
    jenkinsJobDsl=1.77
    jenkinsTestHarness=2.71

    jenkinsGroovyPlugin=2.3
    jenkinsRemoting=4.3

    jenkinsTestSecurityScript=1.3
}

sourceSets {
    jobs {
        groovy {
            srcDirs 'jobs'
            compileClasspath += main.compileClasspath
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File',
                'Implementation-Version': version,
                'Main-Class': 'dev.snowdrop.FilePathHelper'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

repositories {
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
}

configurations {
    testPlugins {}
    //all*.exclude group: 'org.apache.maven'
}

/*
configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}
*/

dependencies {
    compile "org.jenkins-ci.main:jenkins-core:${jenkinsCore}"
    compile "org.jenkins-ci.main:remoting:${jenkinsRemoting}"
    compile "org.jenkins-ci.plugins:groovy:${jenkinsGroovyPlugin}@jar"
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile("org.jenkins-ci.plugins:job-dsl-core:1.77@jar")

    testCompile 'com.offbytwo.jenkins:jenkins-client:0.3.8'

    testCompile("org.jenkins-ci.main:jenkins-war:${jenkinsCore}")
    testCompile("org.jenkins-ci.main:jenkins-test-harness:${jenkinsTestHarness}")
    testCompile("org.jenkins-ci.main:jenkins-test-harness-tools:2.2")

    testCompile("org.jenkins-ci.plugins:job-dsl:1.77")
    testCompile("org.jenkins-ci.plugins:job-dsl:1.77@jar")
    // Deps needed by maven job
    testCompile("org.antlr:antlr4-runtime:4.5")

    // The lib-jenkins-maven-embedder lib embeds all the needed maven deps for maven 3.5.4
    testCompile("org.jenkins-ci.lib:lib-jenkins-maven-embedder:3.15")
    testCompile("org.jenkins-ci.lib:lib-jenkins-maven-artifact-manager:1.2")
    testCompile 'org.jenkins-ci.main:maven-plugin:3.8@jar'
    testCompile('org.jenkins-ci.main.maven:maven3-agent:1.13')
    testCompile('org.jenkins-ci.main.maven:maven35-agent:1.13')
    testCompile('org.jenkins-ci.main.maven:maven35-interceptor:1.13')
    testCompile('org.apache.maven:maven-resolver-provider:3.5.4')
    testCompile('org.apache.maven.resolver:maven-resolver-api:1.6.1')
    testCompile('org.apache.maven.resolver:maven-resolver-impl:1.6.1') // jar packaging org.eclipse.aether.internal.impl.Default*
    testCompile('org.apache.maven:maven-compat:3.5.4') // jar packaging org.apache.maven.repository.*

    // Dependencies added post  list calculation and needed for the Junit test case
    testCompile 'com.coravy.hudson.plugins.github:github:1.32.0@jar'

    testCompile 'org.jenkins-ci.plugins:structs:1.20@jar'
    testCompile 'org.jenkins-ci.plugins:token-macro:2.12@jar'
    testCompile 'org.jenkins-ci.plugins:script-security:1.75@jar'
    testCompile 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.23@jar'
    testCompile 'org.jenkins-ci.plugins:scm-api:2.6.4@jar'
    testCompile 'org.jenkins-ci.plugins:credentials:2.3.14@jar'
    testCompile 'org.jenkins-ci.plugins:javadoc:1.6@jar'
    testCompile 'org.jenkins-ci.plugins:mailer:1.32.1@jar'
    testCompile 'org.jenkins-ci.plugins:junit:1.47@jar'

    testCompile 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    testCompile 'org.kohsuke:github-api:1.93'

    /* Plugins list to be installed
       It has been created usung the groovy script from a local jenkins instance - 2.271
       where only : maven-install, git-parameter and job-dsl plugins were installed
     */
    testPlugins 'io.jenkins.plugins:bootstrap4-api:4.5.3-1'
    testPlugins 'io.jenkins.plugins:checks-api:1.1.1'
    testPlugins 'io.jenkins.plugins:echarts-api:4.9.0-2'
    testPlugins 'io.jenkins.plugins:font-awesome-api:5.15.1-1'
    testPlugins 'io.jenkins.plugins:jquery3-api:3.5.1-2'
    testPlugins 'io.jenkins.plugins:plugin-util-api:1.6.0'
    testPlugins 'io.jenkins.plugins:popper-api:1.16.0-7'
    testPlugins 'io.jenkins.plugins:snakeyaml-api:1.27.0'
    testPlugins 'org.jenkins-ci.main:maven-plugin:3.8'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-api:2.40'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.11'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.23'
    testPlugins 'org.jenkins-ci.plugins:apache-httpcomponents-client-4-api:4.5.10-2.0'
    testPlugins 'org.jenkins-ci.plugins:command-launcher:1.5'
    testPlugins 'org.jenkins-ci.plugins:credentials:2.3.14'
    testPlugins 'org.jenkins-ci.plugins:display-url-api:2.3.4'
    testPlugins 'org.jenkins-ci.plugins:git-client:3.5.1'
    testPlugins 'org.jenkins-ci.plugins:git:4.5.0'
    testPlugins 'org.jenkins-ci.plugins:jackson2-api:2.12.0'
    testPlugins 'org.jenkins-ci.plugins:javadoc:1.6'
    testPlugins 'org.jenkins-ci.plugins:jdk-tool:1.4'
    testPlugins 'org.jenkins-ci.plugins:jquery:1.12.4-1'
    testPlugins 'org.jenkins-ci.plugins:jsch:0.1.55.2'
    testPlugins 'org.jenkins-ci.plugins:junit:1.47'
    testPlugins 'org.jenkins-ci.plugins:mailer:1.32.1'
    testPlugins 'org.jenkins-ci.plugins:scm-api:2.6.4'
    testPlugins 'org.jenkins-ci.plugins:script-security:1.75'
    testPlugins 'org.jenkins-ci.plugins:ssh-credentials:1.18.1'
    testPlugins 'org.jenkins-ci.plugins:trilead-api:1.0.13'
    testPlugins 'org.jenkins-ci.tools:git-parameter:0.9.13'

    // Plugins missing and not installed with list suggested when we configure a local jenkins instance
    //testPlugins 'org.jenkins-ci.main:maven-plugin:3.8'
    //testPlugins 'org.jenkins-ci.tools:git-parameter:0.9.13'

    //testPlugins 'org.jenkins-ci.plugins:structs:1.20'

    // Run the following script in the Script Console of your Jenkins instance to generate
    // the above testPlugins list. (adapted from https://git.io/fjpUs)
    /*
        Jenkins.instance.pluginManager.plugins
            .findAll { !(it.shortName in ['job-dsl', 'structs']) }
            .collect { "testPlugins '${it.manifest.mainAttributes.getValue("Group-Id")}:${it.shortName}:${it.version}'" }
            .sort()
            .each { println it }

        and testCompile dependencies
        Jenkins.instance.pluginManager.plugins
            .findAll { !(it.shortName in ['job-dsl', 'structs']) }
            .collect { "testCompile '${it.manifest.mainAttributes.getValue("Group-Id")}:${it.shortName}:${it.version}@jar'" }
            .sort()
            .each { println it }
     */
}

task resolveTestPlugins(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    include '*.hpi'
    include '*.jpi'
    def mapping = [:]

    doFirst {
        configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
            mapping[it.file.name] = "${it.name}.${it.extension}"
        }
    }
    rename { mapping[it] }

    doLast {
        List<String> baseNames = source*.name.collect { mapping[it] }.collect { it[0..it.lastIndexOf('.') - 1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}

test {
    //testLogging.showStandardStreams = true
    //testLogging.exceptionFormat = 'full'

    dependsOn tasks.resolveTestPlugins
    inputs.files sourceSets.jobs.groovy.srcDirs
}