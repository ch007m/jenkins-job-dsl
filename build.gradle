apply plugin: 'groovy'

version = '1.0.0-SNAPSHOT'

ext {
    jenkinsCore = 2.271
    jenkinsJobDsl = 1.77
    jenkinsTestHarness = 2.71

    jenkinsGroovyPlugin = 2.3
    jenkinsRemoting = 4.6

    jenkinsTestSecurityScript = 1.3
}

sourceSets {
    jobs {
        groovy {
            srcDirs 'jobs'
            compileClasspath += main.compileClasspath
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
}

configurations {
    testPlugins {}
    testJenkinsJPI {}
}

dependencies {
    compile group: 'ant', name: 'ant', version: '1.7.0'
    compile group: 'ant', name: 'ant-launcher', version: '1.6.5'

    compile "org.jenkins-ci.main:jenkins-core:${jenkinsCore}"
    compile "org.jenkins-ci.main:remoting:${jenkinsRemoting}"

    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile("org.jenkins-ci.plugins:job-dsl-core:1.77@jar")

    testCompile "org.jenkins-ci.plugins:groovy:${jenkinsGroovyPlugin}@jar"

    testCompile("org.jenkins-ci.main:jenkins-war:${jenkinsCore}")
    testCompile("org.jenkins-ci.main:jenkins-test-harness:${jenkinsTestHarness}")
    testCompile("org.jenkins-ci.main:jenkins-test-harness-tools:2.2")

    // Jenkins Job DSL
    //testCompile("org.jenkins-ci.plugins:job-dsl:1.77")
    testCompile("org.jenkins-ci.plugins:job-dsl:1.77@jar")

    // DSL Pipeline
    testCompile ('org.jenkins-ci.plugins.workflow:workflow-step-api:2.23@jar')
    testCompile ("org.jenkins-ci.plugins.workflow:workflow-support:3.7@jar")
    testCompile ("org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.23@jar")
    testCompile ("org.jenkins-ci.plugins.workflow:workflow-job:2.40@jar")
    testCompile ("org.jenkins-ci.plugins.workflow:workflow-api:2.40@jar")
    testCompile ("org.jenkins-ci.plugins.workflow:workflow-cps:2.87@jar")

    testCompile ("org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.37@jar")
    testCompile ("org.jenkins-ci.plugins.workflow:workflow-scm-step:2.11@jar")

    testCompile ("org.jenkins-ci.plugins.workflow:workflow-api:2.40@jar")
    testCompile ("org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6@jar")
    testCompile("com.cloudbees:groovy-cps:1.32")

    testCompile("org.jenkins-ci.plugins:pipeline-build-step:2.13@jar")
    testCompile("org.jenkins-ci.plugins:pipeline-input-step:2.12@jar")
    testCompile("org.jenkins-ci.plugins:durable-task:1.35@jar")

    // Jar needed for the test case using the JenkinsServer Client: https://github.com/jenkinsci/java-client-api/blob/master/README.md
    testCompile 'com.offbytwo.jenkins:jenkins-client:0.3.8'

    // To fix the sisu/guice error, we must unzip/import the hpi zip of the maven-installation plugin locally
    testJenkinsJPI('org.jenkins-ci.main:maven-plugin:3.8@hpi')
    testCompile fileTree(dir: 'target/maven-plugin', include: ['*.jar'])

    // Dependencies added post list calculation and needed for the Junit test case using maven Job DSL
    testCompile("org.antlr:antlr4-runtime:4.5")
    testCompile 'com.coravy.hudson.plugins.github:github:1.32.0@jar'

    testCompile 'org.jenkins-ci.plugins:structs:1.20@jar'
    testCompile 'org.jenkins-ci.plugins:token-macro:2.12@jar'
    testCompile 'org.jenkins-ci.plugins:script-security:1.75@jar'
    testCompile 'org.jenkins-ci.plugins:scm-api:2.6.4@jar'
    testCompile 'org.jenkins-ci.plugins:credentials:2.3.14@jar'
    testCompile 'org.jenkins-ci.plugins:javadoc:1.6@jar'
    testCompile 'org.jenkins-ci.plugins:mailer:1.32.1@jar'
    testCompile 'org.jenkins-ci.plugins:junit:1.47@jar'
    testCompile 'io.jenkins.plugins:echarts-api:4.9.0-2@jar'

    testCompile 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    testCompile 'org.kohsuke:github-api:1.93'

    // Additional jar needed by the Pipeline DSL
    testCompile group: 'org.kohsuke', name: 'groovy-sandbox', version: '1.19'
    testCompile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.8'
    testCompile group: 'org.jboss.marshalling', name: 'jboss-marshalling', version: '2.0.10.Final'
    testCompile "org.jenkinsci.plugins:pipeline-model-definition:1.7.2@jar"
    testCompile "org.jenkinsci.plugins:pipeline-model-extensions:1.7.2@jar"
    testCompile "org.jenkins-ci.plugins:credentials-binding:1.24@jar"
    testCompile "com.github.fge:json-schema-validator:2.2.6"
    testCompile "com.github.fge:json-schema-core:1.2.3"

    /* Plugins list to be installed
       It has been created using the groovy script from a local jenkins instance - 2.271
       where only : maven-install, git-parameter and job-dsl plugins were installed
     */
    testPlugins 'io.jenkins.plugins:bootstrap4-api:4.5.3-1'
    testPlugins 'io.jenkins.plugins:checks-api:1.1.1'
    testPlugins 'io.jenkins.plugins:echarts-api:4.9.0-2'
    testPlugins 'io.jenkins.plugins:font-awesome-api:5.15.1-1'
    testPlugins 'io.jenkins.plugins:jquery3-api:3.5.1-2'
    testPlugins 'io.jenkins.plugins:plugin-util-api:1.6.0'
    testPlugins 'io.jenkins.plugins:popper-api:1.16.0-7'
    testPlugins 'io.jenkins.plugins:snakeyaml-api:1.27.0'

    testPlugins 'org.jenkins-ci.main:maven-plugin:3.8'

    //testPlugins 'org.jenkins-ci.plugins.workflow:workflow-api:2.40'
    //testPlugins 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.11'
    //testPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.23'

    testPlugins 'org.jenkins-ci.plugins:apache-httpcomponents-client-4-api:4.5.10-2.0'
    testPlugins 'org.jenkins-ci.plugins:command-launcher:1.5'
    testPlugins 'org.jenkins-ci.plugins:credentials:2.3.14'
    testPlugins 'org.jenkins-ci.plugins:display-url-api:2.3.4'
    testPlugins 'org.jenkins-ci.plugins:git-client:3.5.1'
    testPlugins 'org.jenkins-ci.plugins:git:4.5.0'
    /* !! Adding this plugin is raising many errors
      java.lang.ClassNotFoundException: com.cloudbees.hudson.plugins.folder.AbstractFolderPropertyDescriptor
      Failed to load: Jenkins Git plugin (4.5.0)
      Failed to load: Git Parameter Plug-In (0.9.13)
      due certainly to
      Caused: java.lang.NoClassDefFoundError: com/cloudbees/hudson/plugins/folder/

      testPlugins 'org.jenkins-ci.plugins:global-variable-string-parameter:1.2'
     */

    testPlugins 'org.jenkins-ci.plugins:groovy:2.3'
    testPlugins 'org.jenkins-ci.plugins:jackson2-api:2.12.0'
    testPlugins 'org.jenkins-ci.plugins:javadoc:1.6'
    testPlugins 'org.jenkins-ci.plugins:jdk-tool:1.4'
    testPlugins 'org.jenkins-ci.plugins:jquery:1.12.4-1'
    testPlugins 'org.jenkins-ci.plugins:jsch:0.1.55.2'
    testPlugins 'org.jenkins-ci.plugins:junit:1.47'
    testPlugins 'org.jenkins-ci.plugins:mailer:1.32.1'
    testPlugins 'org.jenkins-ci.plugins:scm-api:2.6.4'
    testPlugins 'org.jenkins-ci.plugins:script-security:1.75'
    testPlugins 'org.jenkins-ci.plugins:ssh-credentials:1.18.1'
    testPlugins 'org.jenkins-ci.plugins:trilead-api:1.0.13'

    testPlugins 'org.jenkins-ci.tools:git-parameter:0.9.13'

    // Pipeline
    //testPlugins ("org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6")

    // Run the following script in the Script Console of your Jenkins instance to generate
    // the above testPlugins list. (adapted from https://git.io/fjpUs)
    /*
        Jenkins.instance.pluginManager.plugins
            .findAll { !(it.shortName in ['job-dsl', 'structs']) }
            .collect { "testPlugins '${it.manifest.mainAttributes.getValue("Group-Id")}:${it.shortName}:${it.version}'" }
            .sort()
            .each { println it }

        and testCompile dependencies
        Jenkins.instance.pluginManager.plugins
            .findAll { !(it.shortName in ['job-dsl', 'structs']) }
            .collect { "testCompile '${it.manifest.mainAttributes.getValue("Group-Id")}:${it.shortName}:${it.version}@jar'" }
            .sort()
            .each { println it }
     */
}

task extractJarFromPlugin(type: Copy) {
    def fileName = ""
    def pluginDestinationFolder = ""
    def buildTempDir = "$buildDir/tmp"
    from configurations.testJenkinsJPI
    into new File(buildTempDir)

    doFirst{
        configurations.testJenkinsJPI.resolvedConfiguration.resolvedArtifacts.each {
            fileName = it.file.name
            pluginDestinationFolder = it.name
            println "File name with extension: $fileName"
            println "Destination folder of the plugin: $buildTempDir/$pluginDestinationFolder"
        }
    }

    doLast {
        ant.unzip(src: "$buildTempDir/$fileName", dest: "$buildTempDir/$pluginDestinationFolder-extracted", overwrite: "true")
        copy {
            from ("$buildTempDir/$pluginDestinationFolder-extracted/WEB-INF/lib")
            include "**/*.jar"
            into "target/$pluginDestinationFolder"
        }
    }
}


task resolveTestPlugins(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    include '*.hpi'
    include '*.jpi'
    def mapping = [:]

    doFirst {
        configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
            mapping[it.file.name] = "${it.name}.${it.extension}"
        }
    }
    rename { mapping[it] }

    doLast {
        List<String> baseNames = source*.name.collect { mapping[it] }.collect { it[0..it.lastIndexOf('.') - 1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}

test {
    testLogging.showStandardStreams = true

    dependsOn tasks.resolveTestPlugins
    dependsOn tasks.extractJarFromPlugin

    inputs.files sourceSets.jobs.groovy.srcDirs
}